let currentPage = 0;
const pages = document.querySelectorAll('.page');
const totalPages = pages.length; // S·∫Ω t·ª± ƒë·ªông l√† 12 (1 b√¨a + 10 n·ªôi dung + 1 k·∫øt th√∫c)
let isPlaying = false;
let albumStarted = false;

// Element references
const startButton = document.getElementById('startButton');
const resetButton = document.getElementById('resetButton');
const prevBtn = document.getElementById('prevBtn');
const nextBtn = document.getElementById('nextBtn');
const currentPageSpan = document.getElementById('currentPage');
const totalPagesSpan = document.getElementById('totalPages');

// Music variables
let audio; // Bi·∫øn ƒë·ªÉ ch·ª©a ƒë·ªëi t∆∞·ª£ng Audio

// ƒê∆∞·ªùng d·∫´n ƒë·∫øn t·ªáp nh·∫°c c·ªßa b·∫°n
const musicFilePath = 'audio/new_song.mp3'; // ƒê·∫£m b·∫£o ƒë∆∞·ªùng d·∫´n n√†y ƒë√∫ng

// --- Music Functions ---
function setupMusic() {
    audio = new Audio(musicFilePath);
    audio.loop = true; // L·∫∑p l·∫°i b√†i h√°t
    audio.volume = 0.5; // ƒê·∫∑t √¢m l∆∞·ª£ng (0.0 ƒë·∫øn 1.0)

    audio.addEventListener('ended', () => {
        console.log('Nh·∫°c ƒë√£ k·∫øt th√∫c.');
        isPlaying = false;
    });

    audio.addEventListener('error', (e) => {
        console.error('L·ªói khi ph√°t nh·∫°c:', e);
        // C√≥ th·ªÉ hi·ªÉn th·ªã th√¥ng b√°o l·ªói cho ng∆∞·ªùi d√πng n·∫øu c·∫ßn
    });
}

function startMusic() {
    if (audio) {
        audio.play().then(() => {
            isPlaying = true;
            console.log('Nh·∫°c ƒëang ph√°t.');
        }).catch(error => {
            // ƒê√¢y l√† l·ªói khi tr√¨nh duy·ªát ch·∫∑n autoplay.
            console.error('Kh√¥ng th·ªÉ ph√°t nh·∫°c t·ª± ƒë·ªông. Ng∆∞·ªùi d√πng c·∫ßn t∆∞∆°ng t√°c:', error);
            // B·∫°n c√≥ th·ªÉ hi·ªÉn th·ªã m·ªôt th√¥ng b√°o ho·∫∑c n√∫t "B·∫≠t nh·∫°c" ·ªü ƒë√¢y
        });
    } else {
        console.error('ƒê·ªëi t∆∞·ª£ng Audio ch∆∞a ƒë∆∞·ª£c kh·ªüi t·∫°o.');
    }
}

function stopMusic() {
    if (audio) {
        audio.pause();
        audio.currentTime = 0; // ƒê·∫∑t l·∫°i v·ªÅ ƒë·∫ßu b√†i h√°t
        isPlaying = false;
        console.log('Nh·∫°c ƒë√£ d·ª´ng.');
    }
}

// --- Fullscreen Function ---
function requestFullscreen() {
    const element = document.documentElement; // L·∫•y th·∫ª <html> ƒë·ªÉ ƒë∆∞a to√†n b·ªô trang v√†o ch·∫ø ƒë·ªô full m√†n h√¨nh

    if (element.requestFullscreen) {
        element.requestFullscreen();
    } else if (element.mozRequestFullScreen) { /* Firefox */
        element.mozRequestFullScreen();
    } else if (element.webkitRequestFullscreen) { /* Chrome, Safari & Opera */
        element.webkitRequestFullscreen();
    } else if (element.msRequestFullscreen) { /* IE/Edge */
        element.msRequestFullscreen();
    }
}

// --- Album Navigation Functions ---
function updatePageCounter() {
    currentPageSpan.textContent = currentPage + 1;
    totalPagesSpan.textContent = totalPages;
}

function updateNavButtons() {
    prevBtn.disabled = currentPage === 0;
    nextBtn.disabled = currentPage === totalPages - 1;

    const controls = document.querySelector('.navigation');
    const counter = document.querySelector('.page-counter');
    if (albumStarted) {
        controls.style.opacity = '1';
        controls.style.pointerEvents = 'auto';
        counter.style.opacity = '1';
    } else {
        controls.style.opacity = '0';
        controls.style.pointerEvents = 'none';
        counter.style.opacity = '0';
    }
}

function nextPage() {
    if (currentPage < totalPages - 1) {
        const currentPageElement = pages[currentPage];
        const nextPageElement = pages[currentPage + 1];

        // 1. T·∫°m th·ªùi tƒÉng z-index c·ªßa trang hi·ªán t·∫°i ƒë·ªÉ n√≥ l·∫≠t tr√™n t·∫•t c·∫£ c√°c trang kh√°c.
        currentPageElement.classList.add('is-flipping-forward');
        
        // 2. Th√™m class 'flipped' ƒë·ªÉ b·∫Øt ƒë·∫ßu animation l·∫≠t.
        currentPageElement.classList.add('flipped');

        // 3. Sau khi animation l·∫≠t ho√†n t·∫•t, ƒëi·ªÅu ch·ªânh z-index v√† x√≥a class t·∫°m th·ªùi.
        setTimeout(() => {
            currentPageElement.classList.remove('is-flipping-forward');
            // ƒê·∫∑t z-index c·ªßa trang ƒë√£ l·∫≠t xu·ªëng th·∫•p nh·∫•t ƒë·ªÉ n√≥ n·∫±m d∆∞·ªõi c√πng.
            currentPageElement.style.zIndex = 1; 
            // ƒê·∫£m b·∫£o trang ti·∫øp theo (b√¢y gi·ªù l√† trang hi·ªán t·∫°i) c√≥ z-index ph√π h·ª£p ƒë·ªÉ hi·ªÉn th·ªã.
            nextPageElement.style.zIndex = totalPages - currentPage;
        }, 800); // Kh·ªõp v·ªõi th·ªùi gian transition trong CSS

        currentPage++;
        updatePageCounter();
        updateNavButtons();
        addSparkleEffect();
        addFloatingHeart();
    }
}

function prevPage() {
    if (currentPage > 0) {
        const currentPageElement = pages[currentPage]; // Trang hi·ªán ƒëang hi·ªÉn th·ªã
        const prevPageElement = pages[currentPage - 1]; // Trang s·∫Ω hi·ªÉn th·ªã sau khi l·∫≠t ng∆∞·ª£c

        // 1. T·∫°m th·ªùi tƒÉng z-index c·ªßa trang s·∫Ω l·∫≠t ng∆∞·ª£c l·∫°i (trang tr∆∞·ªõc ƒë√≥)
        // ƒë·ªÉ n√≥ hi·ªÉn th·ªã tr√™n t·∫•t c·∫£ c√°c trang kh√°c trong qu√° tr√¨nh unflipping.
        prevPageElement.classList.add('is-flipping-backward');

        // 2. X√≥a class 'flipped' kh·ªèi trang hi·ªán t·∫°i ƒë·ªÉ l·∫≠t ng∆∞·ª£c n√≥.
        currentPageElement.classList.remove('flipped');

        // 3. Sau khi animation l·∫≠t ng∆∞·ª£c ho√†n t·∫•t, ƒëi·ªÅu ch·ªânh z-index v√† x√≥a class t·∫°m th·ªùi.
        setTimeout(() => {
            prevPageElement.classList.remove('is-flipping-backward');
            // ƒê·∫∑t l·∫°i z-index c·ªßa trang v·ª´a l·∫≠t ng∆∞·ª£c (trang tr∆∞·ªõc ƒë√≥).
            // N√≥ tr·ªü th√†nh trang hi·ªán t·∫°i, n√™n c·∫ßn z-index cao.
            prevPageElement.style.zIndex = totalPages - (currentPage - 1);
            // ƒê·∫∑t z-index c·ªßa trang v·ª´a b·ªã l·∫≠t ng∆∞·ª£c (trang ban ƒë·∫ßu c·ªßa currentPage) th·∫•p h∆°n.
            currentPageElement.style.zIndex = totalPages - currentPage; 
        }, 800); // Kh·ªõp v·ªõi th·ªùi gian transition trong CSS

        currentPage--;
        updatePageCounter();
        updateNavButtons();
        addSparkleEffect();
        addFloatingHeart();
    }
}

function resetAlbum() {
    pages.forEach((page, index) => {
        page.classList.remove('flipped');
        page.classList.remove('is-flipping-forward'); // X√≥a class t·∫°m th·ªùi
        page.classList.remove('is-flipping-backward'); // X√≥a class t·∫°m th·ªùi
        page.style.zIndex = totalPages - index; // Reset z-index to initial state
    });
    currentPage = 0;
    albumStarted = false;
    updatePageCounter();
    updateNavButtons();

    document.querySelector('.navigation').style.opacity = '0';
    document.querySelector('.navigation').style.pointerEvents = 'none';
    document.querySelector('.page-counter').style.opacity = '0';
    
    stopMusic(); // D·ª´ng nh·∫°c khi reset album

    startButton.style.display = 'block'; // HI·ªÇN TH·ªä L·∫†I N√öT "B·∫Øt ƒë·∫ßu c√¢u chuy·ªán"
}

function startAlbumInteraction() {
    albumStarted = true;
    startButton.style.display = 'none';
    document.querySelector('.navigation').style.opacity = '1';
    document.querySelector('.navigation').style.pointerEvents = 'auto';
    document.querySelector('.page-counter').style.opacity = '1';
    
    startMusic();
    nextPage(); // Move to the first content page

    // G·ªåI H√ÄM Y√äU C·∫¶U FULL M√ÄN H√åNH T·∫†I ƒê√ÇY
    requestFullscreen(); 
}

// --- Decorative Effects ---
function addSparkleEffect() {
    const container = document.querySelector('.album-container');
    for (let i = 0; i < 3; i++) {
        const sparkle = document.createElement('div');
        sparkle.className = 'sparkle';
        sparkle.style.left = Math.random() * 100 + '%';
        sparkle.style.top = Math.random() * 100 + '%';
        sparkle.style.animationDelay = Math.random() * 1.5 + 's';
        container.appendChild(sparkle);

        setTimeout(() => {
            sparkle.remove();
        }, 2000);
    }
}

function addFloatingHeart() {
    const container = document.querySelector('.floating-hearts');
    const heart = document.createElement('div');
    heart.className = 'heart';
    heart.textContent = ['üíï', 'üíñ', 'üíù', 'üíó', 'üíò'][Math.floor(Math.random() * 5)];
    heart.style.left = Math.random() * 100 + '%';
    heart.style.animationDuration = (Math.random() * 4 + 6) + 's';
    heart.style.animationDelay = Math.random() * 2 + 's';
    container.appendChild(heart);

    setTimeout(() => {
        heart.remove();
    }, 8000);
}

function createStars() {
    const starsContainer = document.querySelector('.stars');
    for (let i = 0; i < 100; i++) {
        const star = document.createElement('div');
        star.className = 'star';
        star.style.left = Math.random() * 100 + '%';
        star.style.top = Math.random() * 100 + '%';
        star.style.animationDelay = Math.random() * 2 + 's';
        star.style.animationDuration = (Math.random() * 2 + 1) + 's';
        starsContainer.appendChild(star);
    }
}

// --- Event Listeners ---
document.addEventListener('DOMContentLoaded', () => {
    // Initial z-index setup for all pages
    pages.forEach((page, index) => {
        page.style.zIndex = totalPages - index;
    });

    updatePageCounter();
    updateNavButtons(); // Hide buttons and counter initially
    createStars();

    setInterval(addFloatingHeart, 3000);

    startButton.addEventListener('click', startAlbumInteraction);
    resetButton.addEventListener('click', resetAlbum);
    prevBtn.addEventListener('click', prevPage);
    nextBtn.addEventListener('click', nextPage);

    pages.forEach((page, index) => {
        page.addEventListener('click', (e) => {
            if (albumStarted && index === currentPage && currentPage < totalPages - 1) {
                nextPage();
            }
        });
    });

    let touchStartX = 0;
    let touchEndX = 0;

    document.addEventListener('touchstart', (e) => {
        touchStartX = e.changedTouches[0].screenX;
    });

    document.addEventListener('touchend', (e) => {
        touchEndX = e.changedTouches[0].screenX;
        handleSwipe();
    });

    function handleSwipe() {
        const swipeThreshold = 50;
        const diff = touchStartX - touchEndX;

        if (Math.abs(diff) > swipeThreshold && albumStarted) {
            if (diff > 0) {
                nextPage();
            } else {
                prevPage();
            }
        }
    }

    document.addEventListener('keydown', (e) => {
        if (albumStarted) {
            if (e.key === 'ArrowRight' || e.key === ' ') {
                nextPage();
            } else if (e.key === 'ArrowLeft') {
                prevPage();
            }
        }
    });

    document.querySelector('.navigation').style.opacity = '0';
    document.querySelector('.navigation').style.pointerEvents = 'none';
    document.querySelector('.page-counter').style.opacity = '0';
    
    setupMusic();

    // T·ª± ƒë·ªông ph√°t nh·∫°c v√† y√™u c·∫ßu full m√†n h√¨nh khi trang ƒë∆∞·ª£c t·∫£i V√Ä ng∆∞·ªùi d√πng t∆∞∆°ng t√°c l·∫ßn ƒë·∫ßu
    // (v√≠ d·ª•: click v√†o b·∫•t c·ª© ƒë√¢u tr√™n body ho·∫∑c nh·∫•n n√∫t "B·∫Øt ƒë·∫ßu c√¢u chuy·ªán")
    document.body.addEventListener('click', () => {
        if (!isPlaying) { 
            startMusic();
        }
        // G·ªçi requestFullscreen() ·ªü ƒë√¢y c≈©ng ƒë∆∞·ª£c, nh∆∞ng g·ªçi trong startAlbumInteraction()
        // s·∫Ω ƒë·∫£m b·∫£o n√≥ li√™n k·∫øt tr·ª±c ti·∫øp v·ªõi h√†nh ƒë·ªông "B·∫Øt ƒë·∫ßu album"
    }, { once: true });
});
